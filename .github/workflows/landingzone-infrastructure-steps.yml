name: landingzone-infrastructure-steps.yml

on:
  workflow_call:
    inputs:
      appiName:
        description: 'Name of the appi- resource to deploy - Example: appi-PRODUCT-ENVIRONMENT-001'
        required: true
        type: string
      armPath:
        description: 'Path to ARM files - Example: ./.azure'
        required: true
        type: string
      armSuffix:
        description: 'ARM file suffix. json or bicep'
        required: false
        type: string
        default: 'json'
      azureCredentials:
        description: 'Azure AD Service Principle (App Registration) to use for deployment - Default: secrets.AZURE_CREDENTIALS'
        required: false
        type: string
        default: ${{ github.event.secrets.AZURE_CREDENTIALS }}
      kvName:
        description: 'Name of the kv- resource to deploy - Example: kv-PRODUCT-ENVIRONMENT-001'
        required: true
        type: string
      rgLocation:
        description: 'Azure Region of the resource group - Example: westus2'
        required: true
        type: string
      rgName:
        description: 'Name of Azure Resource Group - Example: COMPANY-rg-PRODUCT-001'
        required: true
        type: string
      stName:
        description: 'Name of the st- resource to deploy - Example: stPRODUCTENVIRONMENT001'
        required: true
        type: string
      workName:
        description: 'Name of the work- resource to deploy - Example: work-PRODUCT-ENVIRONMENT-001'
        required: true
        type: string

jobs:
  check-inputs:
      runs-on: ubuntu-latest
      environment: development
      outputs:
        creds-exists: ${{ steps.secret-exists.outputs.credsExist }}
        azCreds: ${{ steps.secret-exists.outputs.credsExist }}
        clientId-exists: ${{ steps.secret-exists.outputs.clientIdExist }}
        clientSecret-exists: ${{ steps.secret-exists.outputs.clientSecretExist }}
        subscriptionId-exists: ${{ steps.secret-exists.outputs.subscriptionIdExist }}
        tenantId-exists: ${{ steps.secret-exists.outputs.tenantIdExist }}
      steps:
          - id: creds-exists
            if: ${{ github.event.inputs.azureCredentials != '' }}
            run: |
              echo "::set-output name=credsExist::true"
          - id: clientId-exists
            if: ${{ contains(github.event.inputs.azureCredentials, 'clientId') }}
            run: |
              echo "::set-output name=clientIdExist::true"
          - id: clientSecret-exists
            if: ${{ contains(github.event.inputs.azureCredentials, 'clientSecret') }}
            run: |
              echo "::set-output name=clientSecretExist::true"
          - id: subscriptionId-exists
            if: ${{ contains(github.event.inputs.azureCredentials, 'subscriptionId') }}
            run: |
              echo "::set-output name=subscriptionIdExist::true"
          - id: tenantId-exists
            if: ${{ contains(github.event.inputs.azureCredentials, 'tenantId') }}
            run: |
              echo "::set-output name=tenantIdExist::true"

  validate-inputs:
      runs-on: ubuntu-latest
      environment: development
      needs: [check-inputs]
      if: "${{ (needs.check-inputs.outputs.secret-exists != 'true') || (needs.check-inputs.outputs.clientId-exists != 'true') || (needs.check-inputs.outputs.clientSecret-exists != 'true') || (needs.check-inputs.outputs.subscriptionId-exists != 'true') || (needs.check-inputs.outputs.tenantId-exists-exists != 'true') }}"
      steps:
        - run: echo ${{ azureCredentials }} ${{ toJson(azureCredentials) }}  ${{ fromJson(azureCredentials) }}

  deploy_landingzone_step:
    runs-on: ubuntu-latest
    environment: development
    needs: [validate-inputs]
    steps:
    - uses: actions/checkout@v2
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ github.event.inputs.azureCredentials }}
    - name: Deploy ${{ github.event.inputs.stName }}
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: az deployment group create --resource-group ${{ github.event.inputs.rgName }} --template-file ${{ github.event.inputs.armPath }}/st-storageaccount${{ github.event.inputs.armSuffix }} --parameters  ${{ github.event.inputs.armPath }}/st-storageaccount.parameters${{ github.event.inputs.armSuffix }} -name "${{ github.event.inputs.stName }}"
    - name: Deploy ${{ github.event.inputs.workName }}
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: az deployment group create --resource-group ${{ github.event.inputs.rgName }} --template-file ${{ github.event.inputs.armPath }}/work-loganalyticsworkspace${{ github.event.inputs.armSuffix }} --parameters  ${{ github.event.inputs.armPath }}/work-loganalyticsworkspace.parameters${{ github.event.inputs.armSuffix }} -name "${{ github.event.inputs.workName }}"
    - name: Deploy ${{ github.event.inputs.appiName }}
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: az deployment group create --resource-group ${{ github.event.inputs.rgName }} --template-file ${{ github.event.inputs.armPath }}/appi-applicationinsights${{ github.event.inputs.armSuffix }} --parameters  ${{ github.event.inputs.armPath }}/appi-applicationinsights.parameters${{ github.event.inputs.armSuffix }} -name "${{ github.event.inputs.appiName }}" -workName "${{ github.event.inputs.workName }}"
    - name: Deploy ${{ github.event.inputs.kvName }}
      uses: Azure/cli@v1.0.0
      with:
        inlineScript: az deployment group create --resource-group ${{ github.event.inputs.rgName }} --template-file ${{ github.event.inputs.armPath }}/kv-keyvault${{ github.event.inputs.armSuffix }} --parameters  ${{ github.event.inputs.armPath }}/kv-keyvault.parameters${{ github.event.inputs.armSuffix }} -name "${{ github.event.inputs.kvName }}"